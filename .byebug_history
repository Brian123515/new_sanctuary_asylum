continue
 @relation_id = params[:relation_id].present? ? params[:relation_id].to_i : nil
 @relation_id = params[:relation_id] ? params[:relation_id].to_i : nil
continue
params[:relation_id]?
params[:relation_id]
 @relation_id = params[:relation_id] ? params[:relation_id].to_i : nil
@relation_id
continue
@relation_id
continue
self
continue
params[:relation_id]
params[:relation_id].to_i || nil
continue
self
continue
display_validation_errors(family_member_constructor)
family_member_constructor
continue
self
continue
self
continue
family_member_constructor.errors.full_messages
family_member_constructor.errors.messages
family_member_constructor.errors
family_member_constructor
continue
family_member_constructor
@family_member_constructor
continue
@family_member_constructor
family_member_constructor
continue
family_member_constructor
friend
continue
self.errors.messages
self.valid?
self
continue
family_member_constructor.valid?
family_member_constructor = FamilyMemberConstructor.new(family_member_constructor_params)
family_member_constructor_params[:params]
family_member_constructor = FamilyMemberConstructor.new(params: family_member_constructor_params)
family_member_constructor_params
continue
family_member_constructor_params
continue
params
family_member_params
continue
params
self
continue
params
params[:related_id]
SpousalRelationship.create(friend_id: params[:friend_id], spouse_id: params[:related_id])
params[:relationship]
continue
ParentChildRelationship.new(parent_id: 1)
ParentChildRelationship.new(parent_id: params[:relation_id].to_i, child_id: params[:friend_id].to_i)
params[:friend_id].to_i
params[:relation_id].to_i
ParentChildRelationship.create(parent_id: params[:relation_id].to_i, child_id: params[:friend_id].to_i)
continue
ParentChildRelationship.create(parent_id: params[:relation_id], child_id: params[:friend_id].to
ParentChildRelationship.create(parent_id: params[:relation_id], child_id: params[:friend_id])
params[:relation_id]
child_id: params[:relation_id]
params[:friend_id]
params[:relationship]
params
Parentparams
continue
friend
continue
@friend
friend
continue
friend
continue
friend
continue
friend
continue
@friend
friend
continue
family_member
continue
family_member_params['friend_id']
params['friend_id']
continue
family_member
continue
    8:     end
    7:       format.js
respond_to do |format|
family_member = FamilyMember.create(family_member_params)
continue
family_member_params
FamilyMember.create(family_member_params)
continue
f.errors
f = FamilyMember.create(family_member_params)
FamilyMember.create(family_member_params)
continue
save_and_open_page
continue
save_and_open_page
continue
save_and_open_page
continue
save_and_open_page
continue
save_and_open_page
visit confirmation_link
logout(admin)
confirmation_link = URI.extract(ActionMailer::Base.deliveries.first.text_part.body.to_s)[1]
click_button 'Send an invitation'
fill_in 'Email', with: email
visit new_user_invitation_path
login_as(admin)
save_and_open_page
continue
save_and_open_page
continue
save_and_open_page
continue
ActionMailer::Base.deliveries.first.html_part.body.to_s
ActionMailer::Base.deliveries.first.text_part.body.to_s
ActionMailer::Base.deliveries.first.body
continue
ActionMailer::Base.deliveries.first.body.raw_source
click_button 'Send an invitation'
ActionMailer::Base.deliveries.first.body.raw_source
ActionMailer::Base.deliveries.first.body
ActionMailer::Base.deliveries.first
invitation.raw_invitation_token
@token
ActionMailer::Base.deliveries
click_button 'Send an invitation'
continue
params
continue
params
continue
params
continue
save_and_open_page
visit accept_user_invitation_path(invitation_token: invited_user.reload.invitation_token)
invited_user.invitation_token
invited_user
save_and_open_page
continue
invited_user.reload
invited_user
invited_user.invitation_token
invited_user.save
invited_user.confirmed_at = invited_user.invitation_accepted_at if invited_user.respond_to?(:confirmed_at)
invited_user.accept_invitation
invited_user.invited_to_sign_up?
invited_user
user
save_and_open_page
continue
save_and_open_page
continue
volunteer
save_and_open_page
continue
ActionMailer::Base.deliveries.count
ActionMailer::Base.deliveries
continue
User.first
current_user
login_as(admin)
visit new_user_invitation_path
current_user
continue
@friends.present?
@friends.count > 1
@friends.count
@friends
continue
bootstrap_class_for(:error)
bootstrap_class_for("error")
bootstrap_class_for(msg_type)
flash
continue
bootstrap_class_for("alert")
flash.first
flash
continue
flash
continue
flash
continue
flash.count
continue
flash.count
continue
flash.count
flash
continue
@friend.save
continue
value
continue
friend.date_of_birth
friend.date_of_birth = '11/11/2012'
friend.date_of_birth
friend.date_of_birth = '13/11/2012'
friend.save
friend.date_of_birth
friend.date_of_birth = '13/11/2012'
friend.date_of_birth
friend.errors
friend
continue
friend.no_a_number
friend
continue
friend
continue
find("#user-#{volunteer.id}")
find("tr #user-#{volunteer.id}")
find("user-#{volunteer.id}")
find("tr user-#{volunteer.id}")
find("tr-user-#{volunteer.id}")
save_and_open_page
continue
save_and_open_page
visit users_path
continue
save_and_open_page
continue
save_and_open_page
continue
save_and_open_page
visit users_path
save_and_open_page
volunteer
continue
volunteer
save_and_open_page
continue
save_and_open_page
visit users_path
login_as(admin)
login_as(admin, :scope => :user)
volunteer
continue
